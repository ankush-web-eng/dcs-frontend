# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deployment CI

on: [ push, pull_request ]

jobs:

  # BUILD PROJECT AND DEPENDENCIES
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - uses: actions/checkout@v2

      - name: Cache project node-modules
        uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # pipeline actions
      - run: npm ci
      - name: Build frontend Dashboard
        run: npm run build:admin:prod
      - name: Build frontend Blog
        run: npm run build:ssr


  # RUN TESTS
  test:

    needs: [ build ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]
        mongodb-version: [ 4.0 ]

    steps:
      - uses: actions/checkout@v2

      - name: Cache project node-modules
        uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install codecov dependency
        run: npm install -g codecov

      # pipeline actions
      - run: npm run lint
      - run: npm test
      - run: codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  # DEPLOY DASHBOARD (DEVELOP)
  deploy-dashboard-dev:

    needs: [ test ]
#    if: github.ref == 'refs/heads/develop'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create env variables file
        run: echo "ENVIRONMENT=dev" > .env

      - name: Copy project to the hosting
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: ""
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.DEV__REMOTE_TARGET }}

      - name: Deploy project with docker in hosting
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: cd ${{ secrets.DEV__REMOTE_TARGET }} && PORT_FRONTEND=${{ secrets.DEV__PORT_FRONTEND_DASHBOARD }} ./deploy.sh blog-admin-dev docker-compose.admin.yml
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          privateKey: ${{ secrets.SERVER_SSH_KEY}}
